const { app, BrowserWindow } = require("electron");
const { spawn, execSync } = require("child_process");
const net = require("net");

let serverProcess = null;
let isServerRunning = false;

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
 */
function checkPort(port) {
  return new Promise((resolve) => {
    const tester = net
      .createServer()
      .once("error", () => resolve(false))
      .once("listening", () => {
        tester.once("close", () => resolve(true)).close();
      })
      .listen(port);
  });
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞ (Windows)
 */
function freePort(port = 3000) {
  try {
    const result = execSync(`netstat -ano | findstr :${port}`).toString();
    const lines = result.split("\n").filter((l) => l.includes("LISTENING"));
    for (const line of lines) {
      const pid = line.trim().split(/\s+/).pop();
      if (pid) {
        execSync(`taskkill /PID ${pid} /F`);
        console.log(`üßπ –£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å PID=${pid}, –∑–∞–Ω–∏–º–∞–≤—à–∏–π –ø–æ—Ä—Ç ${port}`);
      }
    }
  } catch {
    console.log(`‚úÖ –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
 */
function createWindow() {
  const win = new BrowserWindow({
    width: 1080,
    height: 1920,
    fullscreen: true,
    autoHideMenuBar: true,
    backgroundColor: "#ffffff",
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  win.loadURL("http://localhost:3000");

  win.on("closed", () => {
    win.destroy();
  });
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
 */
async function startServer() {
  const PORT = 3000;

  if (isServerRunning) {
    console.log("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
  const free = await checkPort(PORT);
  if (!free) {
    console.log("‚ö†Ô∏è –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—ã—Ç–∞—é—Å—å –æ—á–∏—Å—Ç–∏—Ç—å...");
    freePort(PORT);
    await new Promise((r) => setTimeout(r, 1000));
  }

  console.log("üöÄ –ó–∞–ø—É—Å–∫ backend-—Å–µ—Ä–≤–µ—Ä–∞...");
  serverProcess = spawn("node", ["./scripts/server.js"], {
    stdio: "inherit",
    shell: true,
  });

  isServerRunning = true;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
 */
app.whenReady().then(async () => {
  await startServer();
  setTimeout(createWindow, 2500);
});

app.on("window-all-closed", () => {
  console.log("üß© –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend...");
  if (serverProcess) serverProcess.kill("SIGTERM");
  app.quit();
});
